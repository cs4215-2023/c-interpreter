// Generated from ./src/lang/Clang.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class ClangLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly WHITESPACE = 19
  public static readonly NEWLINE = 20
  public static readonly PRIMITIVETYPE = 21
  public static readonly IDENTIFIER = 22
  public static readonly SIMPLEESCAPESEQUENCE = 23
  public static readonly StringLiteral = 24
  public static readonly SCharSequence = 25
  public static readonly SChar = 26
  public static readonly EscapeSequence = 27

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'WHITESPACE',
    'NEWLINE',
    'PRIMITIVETYPE',
    'IDENTIFIER',
    'SIMPLEESCAPESEQUENCE',
    'StringLiteral',
    'SCharSequence',
    'SChar',
    'EscapeSequence'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'('",
    "')'",
    "'*'",
    "'/'",
    "'%'",
    "'+'",
    "'-'",
    "'='",
    "'{'",
    "'}'",
    "'?'",
    "':'",
    "';'",
    "'if'",
    "'else'",
    "'while'",
    "'do'",
    "'for'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'WHITESPACE',
    'NEWLINE',
    'PRIMITIVETYPE',
    'IDENTIFIER',
    'SIMPLEESCAPESEQUENCE',
    'StringLiteral',
    'SCharSequence',
    'SChar',
    'EscapeSequence'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    ClangLexer._LITERAL_NAMES,
    ClangLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return ClangLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(ClangLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Clang.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return ClangLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return ClangLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return ClangLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return ClangLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xB8\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03' +
    '\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v' +
    '\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F' +
    '\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11' +
    '\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13' +
    '\x03\x14\x06\x14j\n\x14\r\x14\x0E\x14k\x03\x14\x03\x14\x03\x15\x03\x15' +
    '\x05\x15r\n\x15\x03\x15\x05\x15u\n\x15\x03\x15\x03\x15\x03\x16\x03\x16' +
    '\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16' +
    '\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16' +
    '\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16' +
    '\x03\x16\x05\x16\x97\n\x16\x03\x17\x03\x17\x07\x17\x9B\n\x17\f\x17\x0E' +
    '\x17\x9E\v\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x05\x19\xA5\n\x19' +
    '\x03\x19\x03\x19\x03\x1A\x06\x1A\xAA\n\x1A\r\x1A\x0E\x1A\xAB\x03\x1B\x03' +
    '\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\xB5\n\x1B\x03\x1C' +
    '\x03\x1C\x02\x02\x02\x1D\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06' +
    '\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19' +
    '\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14' +
    "'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
    '\x1C7\x02\x1D\x03\x02\x07\x04\x02\v\v""\x04\x02aac|\x06\x022;C\\aac' +
    '|\f\x02$$))AA^^cdhhppttvvxx\x06\x02\f\f\x0F\x0F$$^^\x02\xC5\x02\x03\x03' +
    '\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03' +
    '\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02' +
    '\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02' +
    '\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02' +
    '\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02' +
    "\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02" +
    '\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03' +
    '\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02' +
    '\x02\x027\x03\x02\x02\x02\x039\x03\x02\x02\x02\x05;\x03\x02\x02\x02\x07' +
    '=\x03\x02\x02\x02\t?\x03\x02\x02\x02\vA\x03\x02\x02\x02\rC\x03\x02\x02' +
    '\x02\x0FE\x03\x02\x02\x02\x11G\x03\x02\x02\x02\x13I\x03\x02\x02\x02\x15' +
    'K\x03\x02\x02\x02\x17M\x03\x02\x02\x02\x19O\x03\x02\x02\x02\x1BQ\x03\x02' +
    '\x02\x02\x1DS\x03\x02\x02\x02\x1FV\x03\x02\x02\x02![\x03\x02\x02\x02#' +
    "a\x03\x02\x02\x02%d\x03\x02\x02\x02'i\x03\x02\x02\x02)t\x03\x02\x02\x02" +
    '+\x96\x03\x02\x02\x02-\x98\x03\x02\x02\x02/\x9F\x03\x02\x02\x021\xA2\x03' +
    '\x02\x02\x023\xA9\x03\x02\x02\x025\xB4\x03\x02\x02\x027\xB6\x03\x02\x02' +
    '\x029:\x07*\x02\x02:\x04\x03\x02\x02\x02;<\x07+\x02\x02<\x06\x03\x02\x02' +
    '\x02=>\x07,\x02\x02>\b\x03\x02\x02\x02?@\x071\x02\x02@\n\x03\x02\x02\x02' +
    "AB\x07'\x02\x02B\f\x03\x02\x02\x02CD\x07-\x02\x02D\x0E\x03\x02\x02\x02" +
    'EF\x07/\x02\x02F\x10\x03\x02\x02\x02GH\x07?\x02\x02H\x12\x03\x02\x02\x02' +
    'IJ\x07}\x02\x02J\x14\x03\x02\x02\x02KL\x07\x7F\x02\x02L\x16\x03\x02\x02' +
    '\x02MN\x07A\x02\x02N\x18\x03\x02\x02\x02OP\x07<\x02\x02P\x1A\x03\x02\x02' +
    '\x02QR\x07=\x02\x02R\x1C\x03\x02\x02\x02ST\x07k\x02\x02TU\x07h\x02\x02' +
    'U\x1E\x03\x02\x02\x02VW\x07g\x02\x02WX\x07n\x02\x02XY\x07u\x02\x02YZ\x07' +
    'g\x02\x02Z \x03\x02\x02\x02[\\\x07y\x02\x02\\]\x07j\x02\x02]^\x07k\x02' +
    '\x02^_\x07n\x02\x02_`\x07g\x02\x02`"\x03\x02\x02\x02ab\x07f\x02\x02b' +
    'c\x07q\x02\x02c$\x03\x02\x02\x02de\x07h\x02\x02ef\x07q\x02\x02fg\x07t' +
    '\x02\x02g&\x03\x02\x02\x02hj\t\x02\x02\x02ih\x03\x02\x02\x02jk\x03\x02' +
    '\x02\x02ki\x03\x02\x02\x02kl\x03\x02\x02\x02lm\x03\x02\x02\x02mn\b\x14' +
    '\x02\x02n(\x03\x02\x02\x02oq\x07\x0F\x02\x02pr\x07\f\x02\x02qp\x03\x02' +
    '\x02\x02qr\x03\x02\x02\x02ru\x03\x02\x02\x02su\x07\f\x02\x02to\x03\x02' +
    '\x02\x02ts\x03\x02\x02\x02uv\x03\x02\x02\x02vw\b\x15\x02\x02w*\x03\x02' +
    '\x02\x02xy\x07x\x02\x02yz\x07q\x02\x02z{\x07k\x02\x02{\x97\x07f\x02\x02' +
    '|}\x07e\x02\x02}~\x07j\x02\x02~\x7F\x07c\x02\x02\x7F\x97\x07t\x02\x02' +
    '\x80\x81\x07k\x02\x02\x81\x82\x07p\x02\x02\x82\x97\x07v\x02\x02\x83\x84' +
    '\x07h\x02\x02\x84\x85\x07n\x02\x02\x85\x86\x07q\x02\x02\x86\x87\x07c\x02' +
    '\x02\x87\x97\x07v\x02\x02\x88\x89\x07u\x02\x02\x89\x8A\x07k\x02\x02\x8A' +
    '\x8B\x07i\x02\x02\x8B\x8C\x07p\x02\x02\x8C\x8D\x07g\x02\x02\x8D\x97\x07' +
    'f\x02\x02\x8E\x8F\x07w\x02\x02\x8F\x90\x07p\x02\x02\x90\x91\x07u\x02\x02' +
    '\x91\x92\x07k\x02\x02\x92\x93\x07i\x02\x02\x93\x94\x07p\x02\x02\x94\x95' +
    '\x07g\x02\x02\x95\x97\x07f\x02\x02\x96x\x03\x02\x02\x02\x96|\x03\x02\x02' +
    '\x02\x96\x80\x03\x02\x02\x02\x96\x83\x03\x02\x02\x02\x96\x88\x03\x02\x02' +
    '\x02\x96\x8E\x03\x02\x02\x02\x97,\x03\x02\x02\x02\x98\x9C\t\x03\x02\x02' +
    '\x99\x9B\t\x04\x02\x02\x9A\x99\x03\x02\x02\x02\x9B\x9E\x03\x02\x02\x02' +
    '\x9C\x9A\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D.\x03\x02\x02\x02' +
    '\x9E\x9C\x03\x02\x02\x02\x9F\xA0\x07^\x02\x02\xA0\xA1\t\x05\x02\x02\xA1' +
    '0\x03\x02\x02\x02\xA2\xA4\x07$\x02\x02\xA3\xA5\x053\x1A\x02\xA4\xA3\x03' +
    '\x02\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\x07' +
    '$\x02\x02\xA72\x03\x02\x02\x02\xA8\xAA\x055\x1B\x02\xA9\xA8\x03\x02\x02' +
    '\x02\xAA\xAB\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC\x03\x02\x02' +
    '\x02\xAC4\x03\x02\x02\x02\xAD\xB5\n\x06\x02\x02\xAE\xB5\x057\x1C\x02\xAF' +
    '\xB0\x07^\x02\x02\xB0\xB5\x07\f\x02\x02\xB1\xB2\x07^\x02\x02\xB2\xB3\x07' +
    '\x0F\x02\x02\xB3\xB5\x07\f\x02\x02\xB4\xAD\x03\x02\x02\x02\xB4\xAE\x03' +
    '\x02\x02\x02\xB4\xAF\x03\x02\x02\x02\xB4\xB1\x03\x02\x02\x02\xB56\x03' +
    '\x02\x02\x02\xB6\xB7\x05/\x18\x02\xB78\x03\x02\x02\x02\v\x02kqt\x96\x9C' +
    '\xA4\xAB\xB4\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!ClangLexer.__ATN) {
      ClangLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(ClangLexer._serializedATN)
      )
    }

    return ClangLexer.__ATN
  }
}
