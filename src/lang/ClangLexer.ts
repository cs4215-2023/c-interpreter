// Generated from ./src/lang/Clang.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class ClangLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly T__17 = 18
  public static readonly T__18 = 19
  public static readonly T__19 = 20
  public static readonly T__20 = 21
  public static readonly T__21 = 22
  public static readonly T__22 = 23
  public static readonly T__23 = 24
  public static readonly SIMPLEESCAPESEQUENCE = 25
  public static readonly StringLiteral = 26
  public static readonly SCharSequence = 27
  public static readonly SChar = 28
  public static readonly EscapeSequence = 29
  public static readonly IDENTIFIER = 30

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'T__17',
    'T__18',
    'T__19',
    'T__20',
    'T__21',
    'T__22',
    'T__23',
    'SIMPLEESCAPESEQUENCE',
    'StringLiteral',
    'SCharSequence',
    'SChar',
    'EscapeSequence',
    'IDENTIFIER'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'void'",
    "'char'",
    "'int'",
    "'float'",
    "'signed'",
    "'unsigned'",
    "'('",
    "')'",
    "'*'",
    "'/'",
    "'%'",
    "'+'",
    "'-'",
    "'='",
    "'{'",
    "'}'",
    "'?'",
    "':'",
    "';'",
    "'if'",
    "'else'",
    "'while'",
    "'do'",
    "'for'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'SIMPLEESCAPESEQUENCE',
    'StringLiteral',
    'SCharSequence',
    'SChar',
    'EscapeSequence',
    'IDENTIFIER'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    ClangLexer._LITERAL_NAMES,
    ClangLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return ClangLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(ClangLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Clang.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return ClangLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return ClangLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return ClangLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return ClangLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02 \xB2\b\x01\x04' +
    '\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04' +
    '\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r' +
    '\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12' +
    '\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17' +
    '\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C' +
    '\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x03\x02\x03\x02\x03\x02\x03' +
    '\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03' +
    '\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03' +
    '\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03' +
    '\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03' +
    '\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03' +
    '\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03' +
    '\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03' +
    '\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03' +
    '\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03' +
    '\x1B\x05\x1B\x98\n\x1B\x03\x1B\x03\x1B\x03\x1C\x06\x1C\x9D\n\x1C\r\x1C' +
    '\x0E\x1C\x9E\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05' +
    '\x1D\xA8\n\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x07\x1F\xAE\n\x1F\f\x1F' +
    '\x0E\x1F\xB1\v\x1F\x02\x02\x02 \x03\x02\x03\x05\x02\x04\x07\x02\x05\t' +
    '\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17' +
    '\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13' +
    "%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
    '\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 \x03\x02\x06\f\x02$$))A' +
    'A^^cdhhppttvvxx\x06\x02\f\f\x0F\x0F$$^^\x04\x02aac|\x06\x022;C\\aac|\x02' +
    '\xB7\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02' +
    '\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02' +
    '\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02' +
    '\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02' +
    '\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02' +
    "\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'" +
    '\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02' +
    '\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02' +
    '\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03' +
    '\x02\x02\x02\x02=\x03\x02\x02\x02\x03?\x03\x02\x02\x02\x05D\x03\x02\x02' +
    '\x02\x07I\x03\x02\x02\x02\tM\x03\x02\x02\x02\vS\x03\x02\x02\x02\rZ\x03' +
    '\x02\x02\x02\x0Fc\x03\x02\x02\x02\x11e\x03\x02\x02\x02\x13g\x03\x02\x02' +
    '\x02\x15i\x03\x02\x02\x02\x17k\x03\x02\x02\x02\x19m\x03\x02\x02\x02\x1B' +
    'o\x03\x02\x02\x02\x1Dq\x03\x02\x02\x02\x1Fs\x03\x02\x02\x02!u\x03\x02' +
    "\x02\x02#w\x03\x02\x02\x02%y\x03\x02\x02\x02'{\x03\x02\x02\x02)}\x03" +
    '\x02\x02\x02+\x80\x03\x02\x02\x02-\x85\x03\x02\x02\x02/\x8B\x03\x02\x02' +
    '\x021\x8E\x03\x02\x02\x023\x92\x03\x02\x02\x025\x95\x03\x02\x02\x027\x9C' +
    '\x03\x02\x02\x029\xA7\x03\x02\x02\x02;\xA9\x03\x02\x02\x02=\xAB\x03\x02' +
    '\x02\x02?@\x07x\x02\x02@A\x07q\x02\x02AB\x07k\x02\x02BC\x07f\x02\x02C' +
    '\x04\x03\x02\x02\x02DE\x07e\x02\x02EF\x07j\x02\x02FG\x07c\x02\x02GH\x07' +
    't\x02\x02H\x06\x03\x02\x02\x02IJ\x07k\x02\x02JK\x07p\x02\x02KL\x07v\x02' +
    '\x02L\b\x03\x02\x02\x02MN\x07h\x02\x02NO\x07n\x02\x02OP\x07q\x02\x02P' +
    'Q\x07c\x02\x02QR\x07v\x02\x02R\n\x03\x02\x02\x02ST\x07u\x02\x02TU\x07' +
    'k\x02\x02UV\x07i\x02\x02VW\x07p\x02\x02WX\x07g\x02\x02XY\x07f\x02\x02' +
    'Y\f\x03\x02\x02\x02Z[\x07w\x02\x02[\\\x07p\x02\x02\\]\x07u\x02\x02]^\x07' +
    'k\x02\x02^_\x07i\x02\x02_`\x07p\x02\x02`a\x07g\x02\x02ab\x07f\x02\x02' +
    'b\x0E\x03\x02\x02\x02cd\x07*\x02\x02d\x10\x03\x02\x02\x02ef\x07+\x02\x02' +
    'f\x12\x03\x02\x02\x02gh\x07,\x02\x02h\x14\x03\x02\x02\x02ij\x071\x02\x02' +
    "j\x16\x03\x02\x02\x02kl\x07'\x02\x02l\x18\x03\x02\x02\x02mn\x07-\x02" +
    '\x02n\x1A\x03\x02\x02\x02op\x07/\x02\x02p\x1C\x03\x02\x02\x02qr\x07?\x02' +
    '\x02r\x1E\x03\x02\x02\x02st\x07}\x02\x02t \x03\x02\x02\x02uv\x07\x7F\x02' +
    '\x02v"\x03\x02\x02\x02wx\x07A\x02\x02x$\x03\x02\x02\x02yz\x07<\x02\x02' +
    'z&\x03\x02\x02\x02{|\x07=\x02\x02|(\x03\x02\x02\x02}~\x07k\x02\x02~\x7F' +
    '\x07h\x02\x02\x7F*\x03\x02\x02\x02\x80\x81\x07g\x02\x02\x81\x82\x07n\x02' +
    '\x02\x82\x83\x07u\x02\x02\x83\x84\x07g\x02\x02\x84,\x03\x02\x02\x02\x85' +
    '\x86\x07y\x02\x02\x86\x87\x07j\x02\x02\x87\x88\x07k\x02\x02\x88\x89\x07' +
    'n\x02\x02\x89\x8A\x07g\x02\x02\x8A.\x03\x02\x02\x02\x8B\x8C\x07f\x02\x02' +
    '\x8C\x8D\x07q\x02\x02\x8D0\x03\x02\x02\x02\x8E\x8F\x07h\x02\x02\x8F\x90' +
    '\x07q\x02\x02\x90\x91\x07t\x02\x02\x912\x03\x02\x02\x02\x92\x93\x07^\x02' +
    '\x02\x93\x94\t\x02\x02\x02\x944\x03\x02\x02\x02\x95\x97\x07$\x02\x02\x96' +
    '\x98\x057\x1C\x02\x97\x96\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98' +
    '\x99\x03\x02\x02\x02\x99\x9A\x07$\x02\x02\x9A6\x03\x02\x02\x02\x9B\x9D' +
    '\x059\x1D\x02\x9C\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\x9C' +
    '\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F8\x03\x02\x02\x02\xA0\xA8' +
    '\n\x03\x02\x02\xA1\xA8\x05;\x1E\x02\xA2\xA3\x07^\x02\x02\xA3\xA8\x07\f' +
    '\x02\x02\xA4\xA5\x07^\x02\x02\xA5\xA6\x07\x0F\x02\x02\xA6\xA8\x07\f\x02' +
    '\x02\xA7\xA0\x03\x02\x02\x02\xA7\xA1\x03\x02\x02\x02\xA7\xA2\x03\x02\x02' +
    '\x02\xA7\xA4\x03\x02\x02\x02\xA8:\x03\x02\x02\x02\xA9\xAA\x053\x1A\x02' +
    '\xAA<\x03\x02\x02\x02\xAB\xAF\t\x04\x02\x02\xAC\xAE\t\x05\x02\x02\xAD' +
    '\xAC\x03\x02\x02\x02\xAE\xB1\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xAF' +
    '\xB0\x03\x02\x02\x02\xB0>\x03\x02\x02\x02\xB1\xAF\x03\x02\x02\x02\x07' +
    '\x02\x97\x9E\xA7\xAF\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!ClangLexer.__ATN) {
      ClangLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(ClangLexer._serializedATN)
      )
    }

    return ClangLexer.__ATN
  }
}
