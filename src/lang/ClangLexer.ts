// Generated from ./src/lang/Clang.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class ClangLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly T__7 = 8
  public static readonly T__8 = 9
  public static readonly T__9 = 10
  public static readonly T__10 = 11
  public static readonly T__11 = 12
  public static readonly T__12 = 13
  public static readonly T__13 = 14
  public static readonly T__14 = 15
  public static readonly T__15 = 16
  public static readonly T__16 = 17
  public static readonly MUL = 18
  public static readonly DIV = 19
  public static readonly ADD = 20
  public static readonly SUB = 21
  public static readonly MOD = 22
  public static readonly LESSTHAN = 23
  public static readonly LESSTHANOREQUAL = 24
  public static readonly GREATERTHAN = 25
  public static readonly GREATERTHANOREQUAL = 26
  public static readonly EQUAL = 27
  public static readonly EQUALCHECK = 28
  public static readonly NOTEQUALCHECK = 29
  public static readonly XOR = 30
  public static readonly AND = 31
  public static readonly OR = 32
  public static readonly NOT = 33
  public static readonly BITWISEAND = 34
  public static readonly BITWISEOR = 35
  public static readonly MINUSEQUAL = 36
  public static readonly PLUSEQUAL = 37
  public static readonly BITSHIFTRIGHT = 38
  public static readonly BITSHIFTLEFT = 39
  public static readonly WHITESPACE = 40
  public static readonly NEWLINE = 41
  public static readonly PRIMITIVETYPE = 42
  public static readonly SIGNEDTYPE = 43
  public static readonly IDENTIFIER = 44
  public static readonly FORMATSPECIFIERS = 45
  public static readonly NUMBER = 46
  public static readonly CHAR = 47
  public static readonly FLOAT = 48
  public static readonly PLUSPLUS = 49
  public static readonly MINUSMINUS = 50

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'T__7',
    'T__8',
    'T__9',
    'T__10',
    'T__11',
    'T__12',
    'T__13',
    'T__14',
    'T__15',
    'T__16',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUAL',
    'EQUALCHECK',
    'NOTEQUALCHECK',
    'XOR',
    'AND',
    'OR',
    'NOT',
    'BITWISEAND',
    'BITWISEOR',
    'MINUSEQUAL',
    'PLUSEQUAL',
    'BITSHIFTRIGHT',
    'BITSHIFTLEFT',
    'WHITESPACE',
    'NEWLINE',
    'PRIMITIVETYPE',
    'SIGNEDTYPE',
    'IDENTIFIER',
    'FORMATSPECIFIERS',
    'NUMBER',
    'CHAR',
    'FLOAT',
    'PLUSPLUS',
    'MINUSMINUS'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'\"'",
    "','",
    "'('",
    "')'",
    "'?'",
    "':'",
    "';'",
    "'if'",
    "'{'",
    "'}'",
    "'else'",
    "'while'",
    "'do'",
    "'for'",
    "'['",
    "']'",
    "'printf('",
    "'*'",
    "'/'",
    "'+'",
    "'-'",
    "'%'",
    "'<'",
    "'<='",
    "'>'",
    "'>='",
    "'='",
    "'=='",
    "'!='",
    "'^'",
    "'&&'",
    "'||'",
    "'!'",
    "'&'",
    "'|'",
    "'-='",
    "'+='",
    "'>>'",
    "'<<'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'++'",
    "'--'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUAL',
    'EQUALCHECK',
    'NOTEQUALCHECK',
    'XOR',
    'AND',
    'OR',
    'NOT',
    'BITWISEAND',
    'BITWISEOR',
    'MINUSEQUAL',
    'PLUSEQUAL',
    'BITSHIFTRIGHT',
    'BITSHIFTLEFT',
    'WHITESPACE',
    'NEWLINE',
    'PRIMITIVETYPE',
    'SIGNEDTYPE',
    'IDENTIFIER',
    'FORMATSPECIFIERS',
    'NUMBER',
    'CHAR',
    'FLOAT',
    'PLUSPLUS',
    'MINUSMINUS'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    ClangLexer._LITERAL_NAMES,
    ClangLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return ClangLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(ClangLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Clang.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return ClangLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return ClangLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return ClangLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return ClangLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x024\u0144\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x03' +
    '\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03' +
    '\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03' +
    '\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03' +
    '\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03' +
    '\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03' +
    '\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03' +
    '\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03' +
    '\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03' +
    '\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03"\x03"' +
    "\x03#\x03#\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03&\x03'\x03'\x03'\x03" +
    '(\x03(\x03(\x03)\x06)\xD2\n)\r)\x0E)\xD3\x03)\x03)\x03*\x03*\x05*\xDA' +
    '\n*\x03*\x05*\xDD\n*\x03*\x03*\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03' +
    '+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\xF1\n+\x03,\x03,\x03,\x03' +
    ',\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u0101\n,\x03' +
    '-\x03-\x07-\u0105\n-\f-\x0E-\u0108\v-\x03.\x03.\x03.\x03.\x03.\x03.\x03' +
    '.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03' +
    '.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x05.\u0128\n.\x03/\x06' +
    '/\u012B\n/\r/\x0E/\u012C\x030\x030\x030\x030\x031\x061\u0134\n1\r1\x0E' +
    '1\u0135\x031\x031\x071\u013A\n1\f1\x0E1\u013D\v1\x032\x032\x032\x033\x03' +
    '3\x033\x02\x02\x024\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02' +
    '\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02' +
    "\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14'" +
    '\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C' +
    '7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02#E\x02$G\x02%I\x02' +
    "&K\x02'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x021a" +
    '\x022c\x023e\x024\x03\x02\x07\x04\x02\v\v""\x05\x02C\\aac|\x06\x022' +
    ';C\\aac|\x04\x022;aa\x04\x02++__\x02\u0153\x02\x03\x03\x02\x02\x02\x02' +
    '\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02' +
    '\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11' +
    '\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17' +
    '\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D' +
    '\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03' +
    "\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02" +
    '\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02' +
    '1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02' +
    '\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02' +
    '\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03' +
    '\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02' +
    '\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02' +
    'S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02' +
    '\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02' +
    '\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x03g\x03' +
    '\x02\x02\x02\x05i\x03\x02\x02\x02\x07k\x03\x02\x02\x02\tm\x03\x02\x02' +
    '\x02\vo\x03\x02\x02\x02\rq\x03\x02\x02\x02\x0Fs\x03\x02\x02\x02\x11u\x03' +
    '\x02\x02\x02\x13x\x03\x02\x02\x02\x15z\x03\x02\x02\x02\x17|\x03\x02\x02' +
    '\x02\x19\x81\x03\x02\x02\x02\x1B\x87\x03\x02\x02\x02\x1D\x8A\x03\x02\x02' +
    '\x02\x1F\x8E\x03\x02\x02\x02!\x90\x03\x02\x02\x02#\x92\x03\x02\x02\x02' +
    "%\x9A\x03\x02\x02\x02'\x9C\x03\x02\x02\x02)\x9E\x03\x02\x02\x02+\xA0" +
    '\x03\x02\x02\x02-\xA2\x03\x02\x02\x02/\xA4\x03\x02\x02\x021\xA6\x03\x02' +
    '\x02\x023\xA9\x03\x02\x02\x025\xAB\x03\x02\x02\x027\xAE\x03\x02\x02\x02' +
    '9\xB0\x03\x02\x02\x02;\xB3\x03\x02\x02\x02=\xB6\x03\x02\x02\x02?\xB8\x03' +
    '\x02\x02\x02A\xBB\x03\x02\x02\x02C\xBE\x03\x02\x02\x02E\xC0\x03\x02\x02' +
    '\x02G\xC2\x03\x02\x02\x02I\xC4\x03\x02\x02\x02K\xC7\x03\x02\x02\x02M\xCA' +
    '\x03\x02\x02\x02O\xCD\x03\x02\x02\x02Q\xD1\x03\x02\x02\x02S\xDC\x03\x02' +
    '\x02\x02U\xF0\x03\x02\x02\x02W\u0100\x03\x02\x02\x02Y\u0102\x03\x02\x02' +
    '\x02[\u0127\x03\x02\x02\x02]\u012A\x03\x02\x02\x02_\u012E\x03\x02\x02' +
    '\x02a\u0133\x03\x02\x02\x02c\u013E\x03\x02\x02\x02e\u0141\x03\x02\x02' +
    '\x02gh\x07$\x02\x02h\x04\x03\x02\x02\x02ij\x07.\x02\x02j\x06\x03\x02\x02' +
    '\x02kl\x07*\x02\x02l\b\x03\x02\x02\x02mn\x07+\x02\x02n\n\x03\x02\x02\x02' +
    'op\x07A\x02\x02p\f\x03\x02\x02\x02qr\x07<\x02\x02r\x0E\x03\x02\x02\x02' +
    'st\x07=\x02\x02t\x10\x03\x02\x02\x02uv\x07k\x02\x02vw\x07h\x02\x02w\x12' +
    '\x03\x02\x02\x02xy\x07}\x02\x02y\x14\x03\x02\x02\x02z{\x07\x7F\x02\x02' +
    '{\x16\x03\x02\x02\x02|}\x07g\x02\x02}~\x07n\x02\x02~\x7F\x07u\x02\x02' +
    '\x7F\x80\x07g\x02\x02\x80\x18\x03\x02\x02\x02\x81\x82\x07y\x02\x02\x82' +
    '\x83\x07j\x02\x02\x83\x84\x07k\x02\x02\x84\x85\x07n\x02\x02\x85\x86\x07' +
    'g\x02\x02\x86\x1A\x03\x02\x02\x02\x87\x88\x07f\x02\x02\x88\x89\x07q\x02' +
    '\x02\x89\x1C\x03\x02\x02\x02\x8A\x8B\x07h\x02\x02\x8B\x8C\x07q\x02\x02' +
    '\x8C\x8D\x07t\x02\x02\x8D\x1E\x03\x02\x02\x02\x8E\x8F\x07]\x02\x02\x8F' +
    ' \x03\x02\x02\x02\x90\x91\x07_\x02\x02\x91"\x03\x02\x02\x02\x92\x93\x07' +
    'r\x02\x02\x93\x94\x07t\x02\x02\x94\x95\x07k\x02\x02\x95\x96\x07p\x02\x02' +
    '\x96\x97\x07v\x02\x02\x97\x98\x07h\x02\x02\x98\x99\x07*\x02\x02\x99$\x03' +
    '\x02\x02\x02\x9A\x9B\x07,\x02\x02\x9B&\x03\x02\x02\x02\x9C\x9D\x071\x02' +
    '\x02\x9D(\x03\x02\x02\x02\x9E\x9F\x07-\x02\x02\x9F*\x03\x02\x02\x02\xA0' +
    "\xA1\x07/\x02\x02\xA1,\x03\x02\x02\x02\xA2\xA3\x07'\x02\x02\xA3.\x03" +
    '\x02\x02\x02\xA4\xA5\x07>\x02\x02\xA50\x03\x02\x02\x02\xA6\xA7\x07>\x02' +
    '\x02\xA7\xA8\x07?\x02\x02\xA82\x03\x02\x02\x02\xA9\xAA\x07@\x02\x02\xAA' +
    '4\x03\x02\x02\x02\xAB\xAC\x07@\x02\x02\xAC\xAD\x07?\x02\x02\xAD6\x03\x02' +
    '\x02\x02\xAE\xAF\x07?\x02\x02\xAF8\x03\x02\x02\x02\xB0\xB1\x07?\x02\x02' +
    '\xB1\xB2\x07?\x02\x02\xB2:\x03\x02\x02\x02\xB3\xB4\x07#\x02\x02\xB4\xB5' +
    '\x07?\x02\x02\xB5<\x03\x02\x02\x02\xB6\xB7\x07`\x02\x02\xB7>\x03\x02\x02' +
    '\x02\xB8\xB9\x07(\x02\x02\xB9\xBA\x07(\x02\x02\xBA@\x03\x02\x02\x02\xBB' +
    '\xBC\x07~\x02\x02\xBC\xBD\x07~\x02\x02\xBDB\x03\x02\x02\x02\xBE\xBF\x07' +
    '#\x02\x02\xBFD\x03\x02\x02\x02\xC0\xC1\x07(\x02\x02\xC1F\x03\x02\x02\x02' +
    '\xC2\xC3\x07~\x02\x02\xC3H\x03\x02\x02\x02\xC4\xC5\x07/\x02\x02\xC5\xC6' +
    '\x07?\x02\x02\xC6J\x03\x02\x02\x02\xC7\xC8\x07-\x02\x02\xC8\xC9\x07?\x02' +
    '\x02\xC9L\x03\x02\x02\x02\xCA\xCB\x07@\x02\x02\xCB\xCC\x07@\x02\x02\xCC' +
    'N\x03\x02\x02\x02\xCD\xCE\x07>\x02\x02\xCE\xCF\x07>\x02\x02\xCFP\x03\x02' +
    '\x02\x02\xD0\xD2\t\x02\x02\x02\xD1\xD0\x03\x02\x02\x02\xD2\xD3\x03\x02' +
    '\x02\x02\xD3\xD1\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD5\x03\x02' +
    '\x02\x02\xD5\xD6\b)\x02\x02\xD6R\x03\x02\x02\x02\xD7\xD9\x07\x0F\x02\x02' +
    '\xD8\xDA\x07\f\x02\x02\xD9\xD8\x03\x02\x02\x02\xD9\xDA\x03\x02\x02\x02' +
    '\xDA\xDD\x03\x02\x02\x02\xDB\xDD\x07\f\x02\x02\xDC\xD7\x03\x02\x02\x02' +
    '\xDC\xDB\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xDF\b*\x02\x02\xDF' +
    'T\x03\x02\x02\x02\xE0\xE1\x07x\x02\x02\xE1\xE2\x07q\x02\x02\xE2\xE3\x07' +
    'k\x02\x02\xE3\xF1\x07f\x02\x02\xE4\xE5\x07e\x02\x02\xE5\xE6\x07j\x02\x02' +
    '\xE6\xE7\x07c\x02\x02\xE7\xF1\x07t\x02\x02\xE8\xE9\x07k\x02\x02\xE9\xEA' +
    '\x07p\x02\x02\xEA\xF1\x07v\x02\x02\xEB\xEC\x07h\x02\x02\xEC\xED\x07n\x02' +
    '\x02\xED\xEE\x07q\x02\x02\xEE\xEF\x07c\x02\x02\xEF\xF1\x07v\x02\x02\xF0' +
    '\xE0\x03\x02\x02\x02\xF0\xE4\x03\x02\x02\x02\xF0\xE8\x03\x02\x02\x02\xF0' +
    '\xEB\x03\x02\x02\x02\xF1V\x03\x02\x02\x02\xF2\xF3\x07u\x02\x02\xF3\xF4' +
    '\x07k\x02\x02\xF4\xF5\x07i\x02\x02\xF5\xF6\x07p\x02\x02\xF6\xF7\x07g\x02' +
    '\x02\xF7\u0101\x07f\x02\x02\xF8\xF9\x07w\x02\x02\xF9\xFA\x07p\x02\x02' +
    '\xFA\xFB\x07u\x02\x02\xFB\xFC\x07k\x02\x02\xFC\xFD\x07i\x02\x02\xFD\xFE' +
    '\x07p\x02\x02\xFE\xFF\x07g\x02\x02\xFF\u0101\x07f\x02\x02\u0100\xF2\x03' +
    '\x02\x02\x02\u0100\xF8\x03\x02\x02\x02\u0101X\x03\x02\x02\x02\u0102\u0106' +
    '\t\x03\x02\x02\u0103\u0105\t\x04\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105' +
    '\u0108\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02' +
    '\x02\x02\u0107Z\x03\x02\x02\x02\u0108\u0106\x03\x02\x02\x02\u0109\u010A' +
    "\x07$\x02\x02\u010A\u010B\x07'\x02\x02\u010B\u010C\x07f\x02\x02\u010C" +
    '\u010D\x03\x02\x02\x02\u010D\u0128\x07$\x02\x02\u010E\u010F\x07$\x02\x02' +
    "\u010F\u0110\x07'\x02\x02\u0110\u0111\x07k\x02\x02\u0111\u0112\x03\x02" +
    '\x02\x02\u0112\u0128\x07$\x02\x02\u0113\u0114\x07$\x02\x02\u0114\u0115' +
    "\x07'\x02\x02\u0115\u0116\x07e\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117" +
    "\u0128\x07$\x02\x02\u0118\u0119\x07$\x02\x02\u0119\u011A\x07'\x02\x02" +
    '\u011A\u011B\x07h\x02\x02\u011B\u011C\x03\x02\x02\x02\u011C\u0128\x07' +
    "$\x02\x02\u011D\u011E\x07$\x02\x02\u011E\u011F\x07'\x02\x02\u011F\u0120" +
    '\x07u\x02\x02\u0120\u0121\x03\x02\x02\x02\u0121\u0128\x07$\x02\x02\u0122' +
    "\u0123\x07$\x02\x02\u0123\u0124\x07'\x02\x02\u0124\u0125\x07r\x02\x02" +
    '\u0125\u0126\x03\x02\x02\x02\u0126\u0128\x07$\x02\x02\u0127\u0109\x03' +
    '\x02\x02\x02\u0127\u010E\x03\x02\x02\x02\u0127\u0113\x03\x02\x02\x02\u0127' +
    '\u0118\x03\x02\x02\x02\u0127\u011D\x03\x02\x02\x02\u0127\u0122\x03\x02' +
    '\x02\x02\u0128\\\x03\x02\x02\x02\u0129\u012B\t\x05\x02\x02\u012A\u0129' +
    '\x03\x02\x02\x02\u012B\u012C\x03\x02\x02\x02\u012C\u012A\x03\x02\x02\x02' +
    '\u012C\u012D\x03\x02\x02\x02\u012D^\x03\x02\x02\x02\u012E\u012F\x07)\x02' +
    '\x02\u012F\u0130\n\x06\x02\x02\u0130\u0131\x07)\x02\x02\u0131`\x03\x02' +
    '\x02\x02\u0132\u0134\x042;\x02\u0133\u0132\x03\x02\x02\x02\u0134\u0135' +
    '\x03\x02\x02\x02\u0135\u0133\x03\x02\x02\x02\u0135\u0136\x03\x02\x02\x02' +
    '\u0136\u0137\x03\x02\x02\x02\u0137\u013B\x070\x02\x02\u0138\u013A\x04' +
    '2;\x02\u0139\u0138\x03\x02\x02\x02\u013A\u013D\x03\x02\x02\x02\u013B\u0139' +
    '\x03\x02\x02\x02\u013B\u013C\x03\x02\x02\x02\u013Cb\x03\x02\x02\x02\u013D' +
    '\u013B\x03\x02\x02\x02\u013E\u013F\x07-\x02\x02\u013F\u0140\x07-\x02\x02' +
    '\u0140d\x03\x02\x02\x02\u0141\u0142\x07/\x02\x02\u0142\u0143\x07/\x02' +
    '\x02\u0143f\x03\x02\x02\x02\r\x02\xD3\xD9\xDC\xF0\u0100\u0106\u0127\u012C' +
    '\u0135\u013B\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!ClangLexer.__ATN) {
      ClangLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(ClangLexer._serializedATN)
      )
    }

    return ClangLexer.__ATN
  }
}
